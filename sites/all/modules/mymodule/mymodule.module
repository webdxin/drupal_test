<?php

/**
 * @file
 * Enables users to send the petitions and petitions are save with current domain flag
 * current domain flag at backend.
 */


/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function mymodule_help($path, $arg) {
  switch ($path) {
    case "admin/help#mymodule":
      return '<p>'.  t("my test module") .'</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function mymodule_block_info() {
  $blocks['mymodule1'] = array(
    'info' => t('my first block'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['mymodule2'] = array(
    'info' => t('my second block'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function mymodule_block_view($delta = '') { // have to change / Delete
$block = array();
  switch($delta){
    case 'mymodule1':
      $block['subject'] = t(' الإستدعاء ');
      if(user_access('access content')){
	 	 $block['content'] = drupal_get_form('petition_request_form');
        }
		else
		{
			//$block['content'] = drupal_goto('user/login');
			$block['content'] = 'You are not authorise, go to login page.';
		}
  }
  return $block;
}


function _mymodule_view()
{
	 $output = '';
	
		global $user;
		$user_id = $user->uid;
		
		
		$header = array(
					array('data' => 'Title', 'field' => 'title'),
					array('data' => t('Nid'), 'field' => 'nid'),
					array('data' => t('body'), 'field' => 'body_value')
					);
		
		
		$query = db_select('node', 'n');
		$query->join('field_data_body', 'b', 'n.nid = b.entity_id');
		
		$query->condition('n.type', 'flat')	//Only current user petitions
			->extend('PagerDefault') 	//Pager Extender
			->limit(2)				//10 results per page
			->extend('TableSort')		//Sorting Extender
			->orderByHeader($header)//Field to sort on is picked from $header
			->fields ('n', array (
				'title',
				'nid'
			))
			->fields ('b', array (
				'body_value'
			))
			;	
			
			
			$results = $query
			->execute();
			/*
			// query for total count without limit condition
			$query_total = db_select('wcm_petitions', 'petitions')->condition('FK_USER_ID', $user_id)->fields('petitions', array('PK_ID') );	
			$results_total = $query_total->execute();
			$total_records = $results_total->rowCount();
			*/
			
			$rows = array();
			foreach ($results as $node) {
				$rows[] = array(
							'data' => array(
											 l($node->title, 'node/' . $node->nid),
								  $node->nid,
								  $node->body_value
							)
				);
			}
			
			$html = theme('mymodule',array('content'=>$rows) );
			
			/*$html = theme('table', 
						array(
							'header' => $header,
							'rows'=>$rows,
							//'caption' => ''.$user->name.' submitted '.$total_records.' petitions ',	//Optional Caption for the table
							'sticky' => TRUE,						//Optional to indicate whether the table headers should be sticky
							'empty' => 'No flat created...',		//Optional empty text for the table if resultset is empty
						)
					);
			$html .= theme('pager',
							array(
								'tags' => array()
							)
						);*/
			
			$output = $html;
	return $output;
}
/**
 * Implements hook_menu().
 */
function mymodule_menu() {
  $items = array();
  
	$items['mymodule'] = array(
    'title' => t('Search property'),
    'page callback' => '_mymodule_page',
	'page arguments' => array('mymodule_search_form'), 
    'access callback' => TRUE,
    'type' => MENU_CALLBACK, 
  );
  $items['mymodule/view'] = array(
    'title' => t('Your module'),
    'page callback' => '_mymodule_view',
	'page arguments' => array('list'), 
    'access callback' => TRUE,
    'type' => MENU_CALLBACK, 
  );
  
  return $items;
}
/**
 * Implements hook_theme().
 * 
 * Prepares the contents of the block.
 */
function mymodule_theme($existing, $type, $theme, $path){
  return array(
    'mymodule' => array(
        'variables' => array('content' => NULL),
        'template'  => 'mymodule', 
    )
  );
}

function mymodule_search_form($form) {
	$form["node_title"] = array("#type" => 'textfield',
					"#required"=> TRUE,
					"#id" => "node_title");
	return $form;
}

/**
 * Implements hook_permission().
 */
function mymodule_permission(){
  return array(
    'access mymodule' => array(
      'title' => t('Access content for the Search process module'),
    )  
  );  
}


function _mymodule_page(){
 $output = '';

			$output = drupal_get_form('mymodule_search_form');
			
		/*	$header = array(
					array('data' => 'Title', 'field' => 'title'),
					array('data' => t('Nid'), 'field' => 'nid'),
					array('data' => t('body'), 'field' => 'body_value')
					);
		
		
		$query = db_select('node', 'n');
		$query->join('field_data_body', 'b', 'n.nid = b.entity_id');
		
		$query->condition('n.type', 'flat')	//Only current user petitions
			->extend('PagerDefault') 	//Pager Extender
			->limit(2)				//10 results per page
			->extend('TableSort')		//Sorting Extender
			->orderByHeader($header)//Field to sort on is picked from $header
			->fields ('n', array (
				'title',
				'nid'
			))
			->fields ('b', array (
				'body_value'
			))
			;	
			
			
			$results = $query
			->execute();
			
			
			$rows = array();
			foreach ($results as $node) {
				$rows[] = array(
							'data' => array(
											 l($node->title, 'node/' . $node->nid),
								  $node->nid,
								  $node->body_value
							)
				);
			}
			
			
			
			$html = theme('table', 
						array(
							'header' => $header,
							'rows'=>$rows,
							//'caption' => ''.$user->name.' submitted '.$total_records.' petitions ',	//Optional Caption for the table
							'sticky' => TRUE,						//Optional to indicate whether the table headers should be sticky
							'empty' => 'No flat created...',		//Optional empty text for the table if resultset is empty
						)
					);
			$html .= theme('pager',
							array(
								'tags' => array()
							)
						);
		$output.= $html;*/
	return $output;
}